// method call using depth 5:
// minimax = alphaBetaTT(board, 5, -MATE, +MATE);
// TT stands for Transposition Table

int alphaBetaTT(ChessBoard board, int depth, int alpha, int beta)
{
  int value;
  TTEntry tte = GetTTEntry(board.getHashKey());
  if(tte != null && tte.depth >= depth)
    {
      if(tte.type == EXACT_VALUE); // stored value is exact
      return tte.value;

if(tte.type == LOWERBOUND && tte.value > alpha)
alpha = tte.value; // update lowerbound alpha if needed
else if(tte.type == UPPERBOUND && tte.value < beta)
beta = tte.value; // update upperbound beta if needed
if(alpha >= beta)
return tte.value; // if lowerbound surpasses upperbound
}
if(depth == 0 || board.isEnded())
{
value = evaluate(board);
if(value <= alpha) // a lowerbound value
StoreTTEntry(board.getHashKey(), value, LOWERBOUND, depth);
else if(value >= beta) // an upperbound value
StoreTTEntry(board.getHashKey(), value, UPPERBOUND, depth);
else // a true minimax value
StoreTTEntry(board.getHashKey(), value, EXACT, depth);
return value;
}
board.getOrderedMoves();
int best = -MATE-1;
int move; ChessBoard nextBoard;
while (board.hasMoreMoves())
{
move = board.getNextMove();
nextBoard = board.makeMove(move);
value = -alphaBetaTT(nextBoard, depth-1,-beta,-alpha);
if(value > best)
best = value;
if(best > alpha)
alpha = best;
if(best >= beta)
break;
14
}
if(best <= alpha) // a lowerbound value
StoreTTEntry(board.getHashKey(), best, LOWERBOUND, depth);
else if(best >= beta) // an upperbound value
StoreTTEntry(board.getHashKey(), best, UPPERBOUND, depth);
else // a true minimax value
StoreTTEntry(board.getHashKey(), best, EXACT, depth);
return
